<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Observability on Aiman Ismail</title><link>https://pokgak.xyz/tags/observability/</link><description>Recent content in Observability on Aiman Ismail</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 24 Jun 2024 13:00:00 +0800</lastBuildDate><atom:link href="https://pokgak.xyz/tags/observability/index.xml" rel="self" type="application/rss+xml"/><item><title>The hidden cost of running your own observability stack</title><link>https://pokgak.xyz/articles/hidden-cost-lgtm/</link><pubDate>Mon, 24 Jun 2024 13:00:00 +0800</pubDate><guid>https://pokgak.xyz/articles/hidden-cost-lgtm/</guid><description>At my latest $job, I was tasked of setting up the LGTM stack (Loki, Grafana, Tempo, Mimir) for observability. Fast forward a few months, I noticed there&amp;rsquo;s a hidden aspect to running the stack that I was not expecting before and that is the network cost, specifically the network transfer cost for cross AZ traffic. At one point we were paying more than $100 per day just for the cross AZ network traffic.</description></item><item><title>Instrumenting a Slack bot with OpenTelemetry</title><link>https://pokgak.xyz/articles/otel-slack-integration/</link><pubDate>Sat, 13 Aug 2022 17:43:00 +0800</pubDate><guid>https://pokgak.xyz/articles/otel-slack-integration/</guid><description>Note: I&amp;rsquo;m using pseudocode in the code example in this article to keep the article brief. Please refer to the official Slack and OpenTelemetry documentation for the actual code.
I&amp;rsquo;ve talked about the basics of OpenTelemetry in my previous article. In this one, I&amp;rsquo;ll explain more on how we&amp;rsquo;re integrating OpenTelemetry with our Slack-based application.
At the end of this article, this is roughly how the span lifetime and events created will look like:</description></item><item><title>OpenTelemetry Basics</title><link>https://pokgak.xyz/articles/otel-basics/</link><pubDate>Sat, 13 Aug 2022 17:43:00 +0800</pubDate><guid>https://pokgak.xyz/articles/otel-basics/</guid><description>I got to work on integrating OpenTelemetry in an application that our team maintains recently so I&amp;rsquo;m starting a series documenting my learnings throughout this journey.
A little background info on the application I&amp;rsquo;m working on: it&amp;rsquo;s a Slack chatbot written in Typescript using BoltJS. Our goal is to know how many users are using our Slack bot with a breakdown of the percentage of successful and error interactions. When an error happened, we also want to know what exactly the user did and the current state of the application that caused it to error.</description></item><item><title>Scrape cAdvisor using Grafana Alloy</title><link>https://pokgak.xyz/articles/scrape-cadvisor-alloy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://pokgak.xyz/articles/scrape-cadvisor-alloy/</guid><description>I was having some issues figuring out how to scrape cAdvisor metrics using Grafana Alloy. After googling I came across this k8s-monitoring helm chart and inside there is a configuration for scraping the built-in cAdvisor on the k8s kubelet.
I ran Alloy as a single pod Deployment and it&amp;rsquo;ll scrape all the nodes in the cluster. Here&amp;rsquo;s the config that I used to get the metrics:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 prometheus.</description></item></channel></rss>
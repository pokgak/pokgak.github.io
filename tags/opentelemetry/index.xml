<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>opentelemetry on Aiman Ismail</title><link>https://pokgak.xyz/tags/opentelemetry/</link><description>Recent content in opentelemetry on Aiman Ismail</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 08 Apr 2023 12:18:00 +0800</lastBuildDate><atom:link href="https://pokgak.xyz/tags/opentelemetry/index.xml" rel="self" type="application/rss+xml"/><item><title>Instrumenting CI Pipelines using otel-cli</title><link>https://pokgak.xyz/articles/instrument-your-cli/</link><pubDate>Sat, 08 Apr 2023 12:18:00 +0800</pubDate><guid>https://pokgak.xyz/articles/instrument-your-cli/</guid><description>Instrumenting your CI pipelines Why? Why not? Get the whole picture of what is happening in your pipeline. Get notified when something is taking longer than it should.
How? Use otel-cli, a standalone Go binary that can create OpenTelemetry traces and sends to a tracing backend using the OTLP protocol.
OpenTelemetry? https://opentelemetry.io/
Tracing Backend? You collect traces from your application using the OpenTelemetry SDK. To visualize the relationship between the traces, you&amp;rsquo;ll have to send the traces to a tracing backend, which will provide a UI for exploring your traces.</description></item><item><title>OpenTelemetry Basics</title><link>https://pokgak.xyz/articles/otel-basics/</link><pubDate>Sat, 13 Aug 2022 17:43:00 +0800</pubDate><guid>https://pokgak.xyz/articles/otel-basics/</guid><description>I got to work on integrating OpenTelemetry in an application that our team maintains recently so I&amp;rsquo;m starting a series documenting my learnings throughout this journey.
A little background info on the application I&amp;rsquo;m working on: it&amp;rsquo;s a Slack chatbot written in Typescript using BoltJS. Our goal is to know how many users are using our Slack bot with a breakdown of the percentage of successful and error interactions. When an error happened, we also want to know what exactly the user did and the current state of the application that caused it to error.</description></item></channel></rss>
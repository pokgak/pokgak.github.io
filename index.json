[{"categories":null,"contents":"Berikut adalah cerita fiksyen untuk menggambarkan permasalahan yang perlu dihadapi setiap kali kita ingin menyebarkan (deploy) aplikasi baru untuk pengguna tanpa teknologi cloud computing.\nSyarikat A telah berjaya membangunkan aplikasi baru yang mereka yakin akan mengubah dunia tetapi mereka belum punyai infrastruktur untuk menyebarkan (deploy) aplikasi tersebut.\n   Konfigurasi  Syarikat A ingin memesan server tersebut daripada vendor B, tapi sebelum itu, perlu ditentukan dahulu konfigurasi server tersebut. Berapakah jumlah RAM diperlukan, CPU apakah yang sesuai dengan beban profail (load profile) aplikasi tersebut, berapa banyak simpanan yang akan digunakan.\nSelain itu, perlu dipertimbangkan juga bagaimana aplikasi itu akan berkembang di masa depan. Bagaimana jika tiba-tiba aplikasi itu mendapat sambutan hangat dan mendapat sejuta pengguna baru dalam masa semalaman? Oleh kerana proses pemesanan akan mengambil masa beberapa minggu (bulan?), maka server tersebut perlu dikalis masa-depan (future proofing) supaya konfigurasi dipesan hari ini masih mencukupi untuk beban masa depan. Jadi kos asal konfigurasi tadi mungkin perlu digandakan untuk memilih konfigurasi yang lebih mahal. Selepas semua ini, syarikat A berjaya memesan server tersebut daripada vendor.\n   Pemasangan  Sesudah server yang dipesan siap dihantar ke data center syarikat A, server itu masih tidak boleh terus dihidupkan begitu saja dan siap untuk melayan aplikasi. Server itu perlu diusung ke rak server dan diletakkan bersama server-server lain. Wayar tenaga dan internet perlu disambung. Kemudian, apabila server telah berjaya dihidupkan, perlu dikonfigurasi pula sistem operasi (OS) tersebut dengan software yang diperlukan untuk aplikasi tersebut.\n   Masa untuk mengubah dunia!  Selepas semua proses itu selesai, maka aplikasi baru syarikat A sedia dilayan dari server baru tersebut dan seperti dijangkakan, aplikasi tersebut mendapat sambutan yang amat bagus! Tersangat bagus hinggakan pengguna dari negara-negara lain mula menggunakan aplikasi itu. Mereka perlu menahan waktu tunggu (waiting time) yang lebih lama berbanding pengguna lokal di negara syarikat A kerana pesanan mereka terpaksa merentas dunia sebelum sampai ke server baru syarikat A ini.\n   Komplikasi  24 jam berlalu dan tiba-tiba pengguna lokal di negara syarikat A tidak dapat mengakses aplikasi itu lagi. Locked. Bahkan bukan pengguna lokal sahaja, semua pengguna seluruh dunia tak dapat mengakses aplikasi itu. Setelah disiasat, rupa-rupanya ada influencer zaman itu (YouTube, Twitter, Facebook, Instagram masih belum wujud pada masa ini ya) telah menghantar telegraf ke peminatnya di seluruh dunia. Hasilnya semua future-proofing yang dirancang sebelum ni semua kelaut, tak cukup untuk menampung beban tiba-tiba dari penambahan pengguna-pengguna baru.\n   Kesimpulan  Pilihan syarikat A sekarang adalah untuk mengulang proses pesanan server tadi dan menunggu beberapa minggu untuk server baru itu pula sampai. Sementara menunggu itu syarikat A telah rugi berjuta-juta kerana kehilangan pelanggan dan semua pengguna aplikasi baru itu telah pun lari ke aplikasi yang dibangunkan syarikat B yang dikatakan lebih bagus dari aplikasi syarikat A.\nTAMMAT.\n","date":"Aug 26","permalink":"https://pokgak.xyz/articles/alkisah-syarikat-a/","tags":null,"title":"Alkisah Syarikat A"},{"categories":null,"contents":"Perkataan \u0026ldquo;cloud\u0026rdquo; rasanya tak asing lagi dalam kamus anak muda zaman sekarang tapi kebanyakannya merujuk kepada \u0026ldquo;cloud storage\u0026rdquo; iaitu servis penyimpanan data online. Kali ini saya ingin menerangkan konsep cloud computing dari sudut seorang programmer.\n   Apa itu cloud?  \u0026lsquo;The cloud is just someone else\u0026rsquo;s computer\u0026rsquo;, adalah salah satu meme yang banyak ditemui online. Hakikatnya begitulah, gambar yang diupload ke iCloud, website Twitter yang anda akses setiap hari, video yang anda tonton di YouTube, semuanya dilayan (hosted) oleh komputer-komputer yang tersusun di data center besar di seluruh dunia.\nOkay, tapi cloud itu bukan sekadar timbunan komputer seluas berpuluh-puluh padang bola sahaja. Ada beberapa ciri-ciri penting untuk sesuatu itu dipanggil cloud computing.\n   Ciri-Ciri Cloud Computing  Berikut adalah ciri-ciri cloud computing yang utama bagi saya:\n sumber atas permintaan (on-demand resources) kitaran maklum balas pendek (short feedback cycle) berskala infinity (infinitely scalable) ketersediaan global (global availability)     Sumber Atas Permintaan (on-demand resources)  Ciri ini adalah kelebihan utama apabila menggunakan servis cloud computing. Sebarang sumber yang diperlukan untuk menyebarkan aplikasi anda sama ada server, sistem penyimpanan atau pengkalan data, kebiasaannya boleh disiapkan dalam masa kurang daripada 30 minit. Dengan ini, apabila aplikasi itu telah siap dibangunkan, ia boleh siap tersedia untuk disebarkan dalam masa yang amat singkat.\nDalam artikel Alkisah Syarikat A saya ingin menggambarkan bagaimanakah proses ini dilakukan sebelum ini. Terdapat pelbagai tugas yang perlu dilakukan sebelum sesuatu sumber itu sedia untuk digunakan. Cloud computing mengambil alih tugas ini dari syarikat A.\n   Kitaran Maklum Balas Pendek (short feedback cycle)  Salah satu kelebihan kebolehan menyiapkan sumber atas permintaan adalah kebolehan untuk bertindak dan menyelesaikan masalah kekurangan kapasiti sumber dengan segera. Sebelum ini, masa untuk menyiapkan sumber baru amat besar, oleh sebab itu sumber untuk aplikasi sentiasa disiapkan dengan konfigurasi lebih besar daripada keperluannya hanya supaya mereka mempunyai kapasiti untuk berkembang sebelum perlu dipesan sumber baru.\nTapi dengan kelebihan waktu singkat untuk menyediakan sumber baru, tidak perlu lagi server itu disiapkan dengan konfigurasi lebih dari keperluan. Jika aplikasi itu tiba-tiba mendapat trafik yang tinggi, penyiapan sumber baru untuk menampung kapasiti boleh dilakukan segera.\n   Berskala Infiniti (infinitely scalable)  Platform-platform hyperscaler cloud computing dikatakan mempunyai sumber infiniti. Pada hakikatnya, apa-apa sumber tidak boleh dikatakan infiniti kerana sumber asli dunia pasti akan habis suatu hari nanti. Tapi infiniti di sini bermaksud, platform-platform hyperscaler ini mampu berkembang lebih cepat daripada kadar keperluan sumber oleh semua pengguna platform tersebut.\n   Ketersediaan Global (global availability)  Secara teori satu sumber yang disebarkan dari sebuah data center di Malaysia punyai kebolehan untuk melayan permintaan daripada seluruh dunia. Hakikatnya, ini akan meninggalkan kesan kepada pengguna-pengguna yang berada di lokasi bertentangan dengan lokasi di mana aplikasi itu dilayan.\nOleh itu, untuk mengembangkan aplikasi ke taraf global, syarikat-syarikat perlu menyediakan server di seluruh dunia supaya permintaan dari pengguna boleh dilayan daripada data center yang terdekat dengan mereka. Bahkan teknologi seperti edge computing wujud hanya untuk mengurangkan masa untuk melayan permintaan pengguna dengan meletakkan server pelayan sedekat mungkin dengan pengguna.\nTapi untuk sesebuah syarikat itu menyediakan server di sebuah lokasi baru tidaklah mudah, terutamanya jika mereka tiada kehadiran fizikal di negara tersebut. Hal-hal regulasi, pembayaran bil dan sebagainya akan menjadi lebih rumit kerana terdapat transaksi rentas negara.\nPlatform hyperscaler cloud computing seperti AWS, Azure, Oracle dll. memudahkan proses ini. Semua aspek fizikal akan diuruskan pihak mereka. Sebagai syarikat pengguna kita hanya perlu membayar sumber-sumber tersebut. Tidak perlu lagi difikirkan aspek-aspek lain.\n   Konklusi  4 ciri-ciri di atas pada hemat saya adalah karakteristik utama sesebuah platform cloud computing. Dengan memahami ciri-ciri ini kita dapat menjadikan cloud computing ini sebagai alat untuk menyelesaikan permasalahan yang wujud dalam menyediakan aplikasi kita.\nPemahaman ini amatlah penting kerana tanpa memahami bagaimana teknologi cloud computing ini mampu membantu menyelesaikan masalah yang kita hadapi, kita hanyalah seperti lembu diikat hidung, ikut sahaja apa trend yang orang lain suapkan. Akhirnya masa dan wang dibazirkan tanpa kita memperoleh manfaat apa-apa pun.\n","date":"Aug 25","permalink":"https://pokgak.xyz/articles/cloud-computing/","tags":null,"title":"Apa itu Cloud Computing?"},{"categories":null,"contents":"Saya gemar melayari subreddit r/dataisbeautiful dan melihat graf hasil buatan pengguna Reddit lain di sana. Salah satu jenis graf yang saya paling minat adalah apabila graf itu seolah-olah animasi, berubah selaras mengikut jangka masa waktu yang semakin bertambah. Kita boleh melihat perkembangan sesuatu data itu dari mula hingga ke akhir.\nContoh post terbaru di subreddit itu yang mempunyai graf sebegini adalah seperti graf di bawah yang memaparkan Kadar vaksinasi sebahagian daripada negara-negara di seluruh dunia (sayang Malaysia tidak dimasukkan sekali di sini):\n Sebelum ini saya menganggap animasi sebegini rumit untuk dilakukan tetapi apabila pihak CITF telah melancarkan public repo di Github bagi data vaksinasi Malaysia, saya memutuskan untuk cuba menghasilkan semula gaya visualisasi ini menggunakan data tersebut.\nSeterusnya saya akan menerangkan langkah-langkah yang diperlukan untuk menghasilkan visualisasi seperti yang di bawah. Sebagai rujukan, code penuh yang saya gunakan di sini boleh didapati di sini.\n    Pembersihan Data  Dalam projek yang melibatkan data sebegini, data boleh datang dari pelbagai sumber dan bentuk. Oleh itu, langkah pertama selalunya adalah pembersihan data. Tujuan langkah ini adalah supaya pada akhirnya kita mempunyai data dalam format yang sesuai dan boleh terus digunakan untuk langkah seterusnya tanpa perlu pemprosesan ekstra apa-apa pun.\nSaya bernasib baik kali ini kerana sumber data yang dibekalkan oleh pihak CITF Malaysia sudah pun berada dalam format CSV yang senang untuk dibaca menggunakan pandas, sebuah library untuk memanipulasi data menggunakan Python. Pihak CITF tidak menawarkan public REST API yang boleh digunakan untuk mengambil (fetch) data tersebut maka saya terpaksa mengambil data menerusi Github. Proses ini kurang sesuai jika anda mahu menapis dahulu data yang diambil tapi untuk kegunaan saya ini, kaedah ini adalah mencukupi.\n1 2 3  STATE_DATA_URL = \u0026#34;https://raw.githubusercontent.com/CITF-Malaysia/citf-public/main/vaccination/vax_state.csv\u0026#34; df = pd.read_csv(StringIO(requests.get(data_url).text))   Function read_csv akan mengambil output data yang diambil dari Github dan menukarkannya ke format DataFrame yang digunakan oleh library pandas. Format DataFrame adalah 2D seakan-akan Excel. Ia mempunyai rows dan columns yang mempunyai data dan menawarkan fungsi-fungsi untuk memanipulasi data tersebut (gabung, pisah, transpose, etc) dengan mudah. Berikut adalah code yang saya gunakan untuk menyiapkan data raw tadi untuk visualisasi:\n1 2 3 4 5 6  df.set_index([\u0026#34;date\u0026#34;, \u0026#34;state\u0026#34;]) .loc[:, [\u0026#34;cumul_partial\u0026#34;, \u0026#34;cumul_full\u0026#34;, \u0026#34;cumul\u0026#34;]] .rename(columns={\u0026#34;cumul_partial\u0026#34;: \u0026#34;partially_vaxed\u0026#34;, \u0026#34;cumul_full\u0026#34;: \u0026#34;fully_vaxed\u0026#34;}) .sort_values(by=\u0026#34;cumul\u0026#34;, ascending=False) .sort_index(level=\u0026#34;date\u0026#34;, sort_remaining=False) .reset_index()   Secara ringkasnya,\n set_index: saya menetapkan column \u0026ldquo;date\u0026rdquo; dan \u0026ldquo;state\u0026rdquo; index DataFrame tersebut yang akan saya gunakan nanti untuk mengasingkan data vaksinasi mengikut tarikh dan negeri loc: pilih hanya column yang saya mahu rename: memberikan nama baharu kepada column-column tersebut supaya lebih mudah difahami sort_values: susun semua data vaksinasi mengikut jumlah kumulatif (\u0026ldquo;cumul\u0026rdquo;) sort_index: susun semua data vaksinasi mengikut tarikh reset_index: menjadikan column index dari langkah 1 sebelum ini balik seperti column biasa yang boleh digunakan secara normal  Untuk mengetahui lebih lanjut fungsi functions yang saya pakai di sini, bolehlah rujuk kepada pandas API Reference.\n   Visualisasi Data menggunakan Plotly  Plotly adalah sebuah library yang menawarkan fungsi-fungsi untuk mempermudah pengguna untuk menghasilkan visualisasi interaktif. Ia ditawarkan dalam bahasa Python, R, ataupun JavaScript. Saya berpeluang untuk menggunakan Plotly dalam Python untuk menghasilkan visualisasi untuk thesis bachelor saya dan berdasarkan pengalaman saya, sangat mudah untuk bereksperimen dan menghasilkan graf visualisasi menarik menggunakan library ini.\nCiri Plotly yang sangat bagus adalah Plotly Express. Untuk kebanyakan fungsi visualisasi, Plotly Express sudah cukup pandai menakrif data yang diberikan dan kemudian menghasilkan visualisasi seperti yang dikehendaki. Berikut adalah code yang saya gunakan untuk menghasilkan animasi graf yang saya paparkan di permulaan blog post ini:\n1 2 3 4 5 6 7 8 9  fig = px.bar( state_data, x=\u0026#34;state\u0026#34;, y=[\u0026#34;partially_vaxed\u0026#34;, \u0026#34;fully_vaxed\u0026#34;], animation_frame=\u0026#34;date\u0026#34;, animation_group=\u0026#34;state\u0026#34;, labels={\u0026#34;value\u0026#34;: \u0026#34;Total vaccinated\u0026#34;, \u0026#34;state\u0026#34;: \u0026#34;\u0026#34;, \u0026#34;variable\u0026#34;: \u0026#34;Dose Type\u0026#34;}, title=\u0026#34;Vaccination Count in Malaysia by State\u0026#34;, )   Jika anda perasan, saya hanyalah menggunakan satu function sahaja daripada Plotly Express iaitu bar. Function ini digunakan untuk menghasilkan visualisasi graf bar. Sebagai parameter, saya berikan data vaksinasi yang telah dibersihkan dan ditukarkan ke format DataFrame. Menerusi parameter x dan y, saya menetapkan data daripada column manakah dalam DataFrame tersebut yang akan digunakan sebagai paksi X dan paksi Y dalam graf.\nSeterusnya, untuk menghasilkan animasi bergerak, saya menggunakan parameter animation_frame dan ditetapkan column \u0026ldquo;date\u0026rdquo; sebagai nilainya (value). Dengan parameter ini, Plotly akan menghasilkan satu graf untuk setiap nilai dalam column tersebut. Jadi bila saya menggunakan column \u0026ldquo;date\u0026rdquo;, Plotly akan menghasilkan satu graf untuk setiap tarikh dalam data vaksinasi. Untuk menghasilkan animasi, graf-graf ini akan disusun mengikut tarikh dan dipaparkan seolah-olah slideshow. Hasil akhirnya kita akan dapat perkembangan kadar vaksinasi selaras dengan masa.\nParameter animation_frame cukup untuk menghasilkan animasi perkembangan kadar vaksinasi tersebut tetapi animasinya kelihation tidak begitu lancar dan seperti terpotong-potong. Oleh itu, saya juga menggunakan parameter animation_group. Dengan parameter ini, Plotly akan mencuba untuk melancarkan transisi antara dua graf yang dihasilkan berdasakan nilai column dalam animation_frame tadi. Dalam visualisasi graf bar, Plotly akan menunjukkan pertukaran posisi bar tersebut apabila ia berubah kedudukan. Dengan ini animasi kita tadi telah pun menjadi lebih lancar.\nAkhir sekali, parameter labels dan title digunakan untuk menetapkan label yang lebih mesra pembaca untuk legend, paksi, serta tajuk graf.\n   Konklusi  Saya amat berpuas hati dengan animasi graf ini kerana saya telah belajar cara untuk menghasilkan jenis bentuk graf yang telah saya minati buat sekian lama. Namun begitu, walaupun graf ini kelihatan lebih cantik berbanding graf lain dengan animasi bergerak, saya akui apa yang telah saya hasilkan ini lebih kepada latihan menggunakan library Plotly itu sendiri. Masih banyak aspek yang boleh diperbaiki untuk menyampaikan maklumat menggunakan graf secara tepat dan efektif.\nUntuk mengakses segala code yang telah saya tunjukkan di sini, boleh akses repository pokgak/citf-graphs di Github. Saya juga telah menetapkan jadual berkala supaya graf visualisasi tersebut dikemas kini setiap hari menggunakan Github Actions. Blog post cara saya bagaimana saya buat akan datang.\n","date":"Aug 25","permalink":"https://pokgak.xyz/articles/graf-interaktif-citf-plotly/","tags":null,"title":"Animasi interaktif berdasarkan data CITF menggunakan Plotly"},{"categories":null,"contents":"Github Actions (GA) adalah servis automation yang ditawarkan oleh Github untuk semua penggunanya. Jika anda mempunyai repository public di Github, anda boleh mula menggunakan Github Actions pada saat ini tanpa perlu membayar apa-apa pun!\n   Bagaimana untuk mula dengan Github Actions?  Untuk mula menggunakan Github Actions, anda boleh pergi ke mana-mana repository public yang anda miliki dan seterusnya pergi ke tab Actions.\nJika anda belum pernah setup mana-mana workflow di repository tersebut, anda akan melihat pilihan templates siap yang boleh digunakan untuk pelbagai jenis projek. Sebagai pemula, saya cadangkan anda mula dengan template barebones yang ditawarkan.\nAnda boleh menggunakan editor local di komputer sendiri tapi Github juga ada menawarkan editor online di mana fail workflow anda akan diperiksa formatnya secara langsung sambil anda menaip. Github akan highlight jika fail workflow anda mempunyai kesalahan yang membuatkan workflow anda akan gagal. Selain itu juga, di tepi editor online itu ada dipaparkan documentation ringkas mengenai syntax fail workflow jadi anda tidak perlu lagi tukar-tukar tab untuk semasa menulis fail workflow anda.\n   Anatomi fail workflow Github Actions  Saya telah beberapa kali menyebut \u0026ldquo;fail workflow\u0026rdquo; dalam perenggan sebelum ini tapi belum pernah menerangkan apakah fail workflow itu. Github Actions menggunakan fail workflow untuk menetapkan bagaimana untuk melakukan automasi. Fail ini ditulis dalam format YAML. Satu ciri-ciri penting yang saya mahu highlight di sini adalah format YAML adalah whitespace-sensitive, bermakna anda perlu pastikan indentation fail workflow anda menggunakan 4 spaces.\nSebelum bermula, ini adalah isi akhir fail workflow contoh kita:\n1 2 3 4 5 6 7 8 9 10  jobs:job-pertama:runs-on:ubuntu-lateststeps:- run:echo Hello, world!- name:Selamat tinggal duniarun:echo Bye, world!- uses:actions/checkout@v2  Ikuti penjelasan saya di bawah untuk memahami apakah yang akan dilakukan apabila workflow ini dijalankan.\n   Keyword dalam fail workflow Github Actions  Dalam fail workflow anda ada dua top-level keyword yang wajib: on dan jobs.\n   Keyword \u0026lt;code\u0026gt;on\u0026lt;/code\u0026gt;  Satu ciri-ciri penting Github Actions adalah, workflow anda perlu dimulakan melalui \u0026ldquo;triggers\u0026rdquo;. Hampir semua aktiviti yang anda boleh lakukan secara manual di Github boleh dijadikan trigger untuk workflow anda. Sebagai contoh, anda boleh menetapkan workflow untuk dijalankan apabila seseorang telah push codenya ke repo, atau apabila pull request baru dibuka. Ini cara bagaimana anda melakukan kedua-dua contoh tersebut:\n1 2 3  on:push:pull_request:  Keyword on digunakan untuk menanda bahawa semua keyword dibawahnya adalah event-event dimana fail workflow anda patut dijalankan. push bermakna apabila seseorang telah push codenya ke repo anda, maka Github Actions akan menjalankan fail workflow tersebut. pull_request pula bermakna jika seseorang telah membuka pull request (PR) baru di repository anda, maka fail workflow tersebut akan dijalankan.\nKedua-dua keyword push dan pull_request ini juga boleh menerima sub-keyword lain untuk tujuan menapis dengan lebih spesifik bila workflow itu patut dijalankan. Antara sub-keyword yang boleh digunakan adalah branches untuk menapis hanya push atau pull request kepada branch yang dinyatakan sahaja. Anda juga boleh menapis mengikut lokasi fail code anda di dalam repo menggunakan sub-keyword paths.\nTerdapat banyak lagi keyword yang anda boleh gunakan untuk trigger workflow anda, jika berminat boleh pergi ke page ini dan ini untuk membaca lebih lanjut.\n   Keyword \u0026lt;code\u0026gt;jobs\u0026lt;/code\u0026gt;  Okay, kita telah tetapkan bila workflow ini patut dijalankan menggunakan keyword on. Seterusnya kita akan menetapkan apa yang workflow ini patut buat menggunakan keyword jobs. Sesebuah workflow mestilah mempunyai paling kurang satu job. Untuk mencipta job baru, anda boleh menggunakan apa-apa perkataan sebagai id cuma perlu dipastikan tiada space. Contohnya seperti berikut:\n1 2 3  jobs:job-pertama:runs-on:ubuntu-latest  Di sini, job-pertama adalah id untuk job kita. Seterusnya, setiap job perlulah menetapkan di bawah environment manakah job ini akan dijalankan. Github Actions menawarkan platform Windows, Linux, dan macOS yang anda boleh gunakan secara percuma. Senarai penuh versi yang disokong boleh dibaca di halaman ini. Di sini saya menggunakan ubuntu-latest yang bermakna, job ini akan dijalankan di platform Ubuntu yang terbaru (pada masa tulisan ini adalah Ubuntu 20.04.\nSetelah menetapkan platform, tiba masa untuk kita senaraikan apakah yang patut workflow kita ini buat. Untuk itu kita perlukan keyword steps. Seperti keyword jobs, keyword steps mengandungi sub-keywords yang, satu untuk setiap apa yang kita mahu jalankan.\nSetiap satu step akan dimulakan dengan simbol -. Dalam syntax YAML, ini menandakan bahawa semua keyword di bawah satu - adalah satu bahagian. Keyword run digunakan untuk menjalankan command seolah-olah anda berada di terminal platform yang telah dipilih menggunakan keyword runs-on sebelum ini.\n1 2 3 4 5 6 7 8  jobs:job-pertama:runs-on:ubuntu-lateststeps:- run:echo Hello, world!- name:Selamat tinggal duniarun:echo Bye, world!  Dalam contoh di atas, saya telah menetapkan step itu untuk run command echo. Command ini akan print perkataan selepas itu ke terminal anda, dalam kes ini anda akan melihat \u0026ldquo;Hello, world\u0026rdquo; di log result workflow anda nanti. Dalam contoh di atas juga, saya telah menetapkan workflow ini untuk run command echo tapi kali ini dengan perkataan lain pula. Selain daripada keyword run, setiap step juga boleh ditetapkan dengan keyword-keyword lain seperti name, id dan pelbagai lagi. Senarai penuh boleh anda lihat di halaman ini. Fungsi simbol - di sini adalah untuk membantu mengumpul semua keyword yang berkaitan dengan step itu. Setiap simbol - bermakna satu step dalam job itu.\n   Keyword \u0026lt;code\u0026gt;uses\u0026lt;/code\u0026gt;  Kita telah melihat bagaimana cara untuk menjalankan sebarang command melalui keyword run. Untuk sesetengah perkara, sekadar bergantung kepada command mungkin akan membataskan apa yang anda boleh lakukan. Oleh itu, Github Actions juga mempunyai fungsi untuk memanggil code luar dari fail workflow anda. Code ini boleh berasal dari repo yang sama ataupun daripada repo developer lain di Github.\nActions ini boleh ditulis dengan pelbagai cara sama ada menggunakan Javascript atau melalui Docker. Github juga menyediakan marketplace untuk anda mencari actions yang sesuai untuk digunakan dalam fail workflow anda. Github sendiri mempunyai beberapa Actions yang essential seperti checkout untuk checkout git repo anda sewaktu workflow dijalankan dan juga setup-node untuk setup environment node/javascript anda.\nUntuk menggunakan Actions, ada perlu menggunakan keyword uses diikuti dengan nama Actions yang ingin digunakan. Kebanyakan Actions juga mempunya keyword tersendiri yang digunakan untuk memperincikan bagaimana Actions tersebut dijalankan.\n1 2 3 4 5 6 7 8 9 10  jobs:job-pertama:runs-on:ubuntu-lateststeps:- run:echo Hello, world!- name:Selamat tinggal duniarun:echo Bye, world!- uses:actions/checkout@v2  Dalam contoh di atas, saya menggunakan Actions dari Github actions/checkout untuk melakukan git checkout repo saya ke sewaktu workflow dijalankan. @v2 di bahagian belakang itu menandakan versi Action tersebut yang ingin saya gunakan. Versi yang ditawarkan oleh Action tersebut boleh disemak di page Releases Action tersebut.\n   Konklusi  Saya pernah menggunakan Jenkins dan Bitbucket Pipeline dan berdasarkan pengalaman saya Github Actions adalah jauh lebih baik dari kedua-dua produk CI/CD tersebut. Dokumentasi Github Actions yang ditawarkan Github adalah sangat lengkap. Saya paling banyak merujuk halaman Workflow Syntax semasa mula belajar menggunakan Github Actions. Selain itu, halaman-halaman lain dalam Reference ini juga sangat membantu anda ingin mula melakukan perkara yang lebih advance dengan Github Actions.\nAntara contoh automation yang pernah saya lakukan menggunakan Github Actions adalah, menjalankan unit test untuk setiap commit push, memeriksa dan baiki tajuk pull request secara automatik jika tidak memenuhi kriteria anda. Saya juga pernah menggunakan Github Actions workflow untuk melakukan DB dump daripada server dan terus upload ke S3. Pada pandangan saya, Github Actions sangat menarik dan macam-macam yang anda boleh lakukan dengannya.\n","date":"Aug 24","permalink":"https://pokgak.xyz/articles/pengenalan-github-actions/","tags":null,"title":"Pengenalan Github Actions"},{"categories":null,"contents":"","date":"Nov 26","permalink":"https://pokgak.xyz/articles/","tags":null,"title":"Articles"}]